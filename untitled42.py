# -*- coding: utf-8 -*-
"""Untitled42.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YR30gpliPIQImWEcNSXBSxgQj7YAXWrT
"""

import pandas as pd
import numpy as np
import sklearn
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras
from keras.layers import Conv2D , Dense, MaxPool2D, Dropout, Flatten
from tensorflow.keras.preprocessing.image import array_to_img, img_to_array, load_img
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.layers import *
from tensorflow.keras.callbacks import EarlyStopping
from keras.models import *
from matplotlib import image
import h5py
import os
from keras.preprocessing import image

from google.colab import drive
drive.mount('/content/drive')

normal = os.listdir(r"/content/drive/MyDrive/lung_disease_dataset/train/Normal")
covid = os.listdir(r"/content/drive/MyDrive/lung_disease_dataset/train/COVID")
pneumonia = os.listdir(r"/content/drive/MyDrive/lung_disease_dataset/train/Viral Pneumonia")

print("No. of normal images are:",len(normal))
print("No. of covid-19 images are:",len(covid))
print("No. of pneumonia images are:",len(pneumonia))

sns.barplot(x=["Normal","Covid","Pneumonia"],y=[len(normal),len(covid),len(pneumonia)])

normal_image = load_img(r"/content/drive/MyDrive/lung_disease_dataset/train/Normal/IM-0349-0001.jpeg")
print("Normal Image")
plt.imshow(normal_image)
plt.show()

covid_image = load_img(r"/content/drive/MyDrive/lung_disease_dataset/train/COVID/012.jpeg")
print("Covid-19 Image")
plt.imshow(covid_image)
plt.show()

pneumonia_image = load_img(r"/content/drive/MyDrive/lung_disease_dataset/train/Viral Pneumonia/011.jpeg")
print("Pneumonia Image")
plt.imshow(pneumonia_image)
plt.show()

train_path = r"/content/drive/MyDrive/lung_disease_dataset/train"
test_path =  r"/content/drive/MyDrive/lung_disease_dataset/test"
val_path = r"/content/drive/MyDrive/lung_disease_dataset/val"

train_datagen = ImageDataGenerator(
                rescale = 1/255.0,
                rotation_range = 20,
                horizontal_flip = True,
                vertical_flip = True,
                fill_mode = 'nearest'
                )

valid_datagen = ImageDataGenerator(
                rescale = 1/255.0,
                rotation_range = 20,
                horizontal_flip=True,
                vertical_flip = True,
                fill_mode = 'nearest'
                )

test_datagen = ImageDataGenerator(
            rescale = 1/255.0)
batch_size = 16

train_generator = train_datagen.flow_from_directory(
            train_path,
            target_size =(256,256),
            batch_size = batch_size,
            class_mode = 'categorical')

train_generator.class_indices

valid_generator = valid_datagen.flow_from_directory(
                    val_path,
                    target_size = (256,256),
                    batch_size = batch_size,
                    class_mode = 'categorical')

valid_generator.class_indices

test_generator = test_datagen.flow_from_directory(
                  test_path,
                    target_size = (256,256),
                    batch_size = batch_size,
                    class_mode ='categorical')

test_generator.class_indices

from keras.applications import ResNet50V2

resnet_model = ResNet50V2(input_shape=(256,256,3),include_top = False,weights = 'imagenet',classes=3,pooling = 'max')

for layer in resnet_model.layers:
    layer.trainable = False

model3 = Sequential()
model3.add(resnet_model)
model3.add(Flatten())
model3.add(Dense(128, activation = "relu"))
model3.add(Dropout(0.2))
model3.add(Dense(3, activation = "softmax"))

model3.compile(loss = 'categorical_crossentropy',optimizer = 'adam',metrics = ['accuracy'])

model3.fit(train_generator,validation_data = valid_generator,epochs = 3, verbose=1,batch_size=16)

df = pd.DataFrame(model3.history.history)

df_losses = df.drop(['loss','val_loss'],axis=1)
df_losses.plot()

df_acc = df.drop(['accuracy','val_accuracy'],axis=1)
df_acc.plot()

print("The accuracy of ResNet Model:",df_losses['val_accuracy'].max() * 100)
print("The loss of ResNet Model:",df_acc['val_loss'].min() *100)

from tensorflow.keras.preprocessing import image

path = r"/content/drive/MyDrive/lung_disease_dataset/val/Covid/01.jpeg"

img = image.load_img(path, target_size = (256,256,3))
img = image.img_to_array(img)/255.0

img = np.array([img])
img.shape

result = np.argmax(model3.predict(img))
print(result)
if result==0:
    print("COVID-19")
elif result==1:
    print("NORMAL")
elif result==2:
    print("VIRAL PNEUMONIA")

model3.save("model3.h5")